CWD = $(shell pwd)
MACH = $(shell uname -p)
SLEEF_TARGET = $(MACH)

ifeq ($(MACH),aarch64)
  SLEEF_TARGET = AArch64
endif

ifeq ($(MACH),x86_64)
  SLEEF_TARGET = X86
endif

DEBUG_BUILD := 0

CC = /usr/bin/gcc
CXX = /usr/bin/g++
CMAKE = /usr/bin/cmake
GMAKE = /usr/bin/gmake
GMAKE_NUMJOBS = -j8

SLEEF_VERSION = 3.4.1
SRCDIR = sleef-$(SLEEF_VERSION)
TOPDIR = $(CWD)
TOPSRCDIR = $(TOPDIR)/$(SRCDIR)
TOPBUILDDIR = $(TOPDIR)/build

OFLAG = -O3
GFLAG =
FMA4 =

ifeq ($(DEBUG_BUILD),1)
  OFLAG = -O0
  GFLAG = -g3
  TOPBUILDDIR = $(TOPDIR)/build-debug
endif

ifeq ($(MACH),x86_64)
  FMA4 = -mfma4
endif

CMAKE_PREFIX = /usr/local
CMAKE_INSTALL_BINDIR = $(CMAKE_PREFIX)/bin
CMAKE_INSTALL_LIBDIR = $(CMAKE_PREFIX)/lib64
CMAKE_INSTALL_LIBEXECDIR = $(CMAKE_PREFIX)/libexec
CMAKE_INSTALL_INCLUDEDIR = $(CMAKE_PREFIX)/include
CMAKE_INSTALL_DATADIR = $(CMAKE_PREFIX)/share
CMAKE_INSTALL_DATAROOTDIR = $(CMAKE_PREFIX)/share

CFLAGS = $(GFLAG) $(OFLAG) -std=gnu99 -pthread
CFLAGS += -ftree-slp-vectorize -ftree-vectorize
CFLAGS += -finline-functions -funroll-loops -fopenmp
CFLAGS += -Wall -Wextra -Wcast-align -Wno-long-long
CFLAGS += -Wno-redundant-move $(FMA4) -flto=32

CXXFLAGS = $(GFLAG) $(OFLAG) -pthread -std=c++11
CXXFLAGS += -fexceptions -frtti
CXXFLAGS += -ftree-vectorize -ftree-slp-vectorize
CXXFLAGS += -finline-functions -funroll-loops -fopenmp
CXXFLAGS += -Wall -Wextra -Wcast-align -Wno-long-long
CXXFLAGS += -Wno-redundant-move $(FMA4) -flto=32

CPPFLAGS = -D_REENTRANT -D_LARGEFILE64_SOURCE -D_FILE_OFFSET_BITS=64
CPPFLAGS += -D__STDC_CONSTANT_MACROS -D__STDC_FORMAT_MACROS
CPPFLAGS += -D__STDC_LIMIT_MACROS -D_XOPEN_SOURCE=700 -D_GNU_SOURCE

LDFLAGS = -fuse-ld=gold -lgomp

ifeq ($(DEBUG_BUILD),1)
  CPPFLAGS += -D_DEBUG -D_GLIBCXX_DEBUG -DXDEBUG
endif

CMAKE_OPTIONS = -DCMAKE_C_COMPILER:FILEPATH=$(CC)
CMAKE_OPTIONS += -DCMAKE_CXX_COMPILER:FILEPATH=$(CXX)
CMAKE_OPTIONS += -DCMAKE_C_CFLAGS:STRING="$(CPPFLAGS) $(CFLAGS)"
CMAKE_OPTIONS += -DCMAKE_CXX_FLAGS:STRING="$(CPPFLAGS) $(CXXFLAGS)"
CMAKE_OPTIONS += -DCMAKE_EXE_LINKER_FLAGS:STRING="$(LDFLAGS)"
CMAKE_OPTIONS += -DCMAKE_SHARED_LINKER_FLAGS:STRING="$(LDFLAGS)"
CMAKE_OPTIONS += -DCMAKE_INSTALL_PREFIX:FILEPATH=$(CMAKE_PREFIX)

CMAKE_OPTIONS += -DCMAKE_INSTALL_BINDIR:STRING="$(CMAKE_INSTALL_BINDIR)"
CMAKE_OPTIONS += -DCMAKE_INSTALL_LIBDIR:STRING="$(CMAKE_INSTALL_LIBDIR)"
CMAKE_OPTIONS += -DCMAKE_INSTALL_LIBEXECDIR:STRING="$(CMAKE_INSTALL_LIBEXECDIR)"
CMAKE_OPTIONS += -DCMAKE_INSTALL_INCLUDEDIR:STRING="$(CMAKE_INSTALL_INCLUDEDIR)"
CMAKE_OPTIONS += -DCMAKE_INSTALL_DATADIR:STRING="$(CMAKE_INSTALL_DATADIR)"
CMAKE_OPTIONS += -DCMAKE_INSTALL_DATAROOTDIR:STRING="$(CMAKE_INSTALL_DATAROOTDIR)"

CMAKE_OPTIONS += -DCMAKE_MAKE_PROGRAM:STRING="/usr/bin/gmake"

ifeq ($(DEBUG_BUILD),1)
  CMAKE_OPTIONS += -DCMAKE_BUILD_TYPE:STRING=Debug
  CMAKE_OPTIONS += -DCMAKE_C_FLAGS_DEBUG:STRING="$(CPPFLAGS) $(OFLAG) $(GFLAG)"
  CMAKE_OPTIONS += -DCMAKE_CXX_FLAGS_DEBUG:STRING="$(CPPFLAGS) $(OFLAG) $(GFLAG)"
  CMAKE_OPTIONS += -DCMAKE_C_FLAGS_RELWITHDEBINFO:STRING="$(CPPFLAGS) $(OFLAG) $(GFLAG)"
  CMAKE_OPTIONS += -DCMAKE_CXX_FLAGS_RELWITHDEBINFO:STRING="$(CPPFLAGS) $(OFLAG) $(GFLAG)"
else
  CMAKE_OPTIONS += -DCMAKE_BUILD_TYPE:STRING=Release
  CMAKE_OPTIONS += -DCMAKE_C_FLAGS_RELEASE:STRING="$(OFLAG) $(CPPFLAGS) -DNDEBUG"
  CMAKE_OPTIONS += -DCMAKE_CXX_FLAGS_RELEASE:STRING="$(OFLAG) $(CPPFLAGS) -DNDEBUG"
  CMAKE_OPTIONS += -DCMAKE_C_FLAGS_RELWITHDEBINFO:STRING="$(OFLAG) $(CPPFLAGS)"
  CMAKE_OPTIONS += -DCMAKE_CXX_FLAGS_RELWITHDEBINFO:STRING="$(OFLAG) $(CPPFLAGS)"
endif

CMAKE_OPTIONS += -DENABLE_GNUABI:BOOL=ON
CMAKE_OPTIONS += -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON
CMAKE_OPTIONS += -DSLEEF_SHOW_CONFIG:BOOL=ON

# OpenMP
CMAKE_OPTIONS += -DCOMPILER_SUPPORTS_OPENMP:BOOL=ON
CMAKE_OPTIONS += -DOpenMP_C_FLAGS:STRING="-fopenmp"
CMAKE_OPTIONS += -DOpenMP_CXX_FLAGS:STRING="-fopenmp"

SLEEF_BUILD_ENV = CC="$(CC)"
SLEEF_BUILD_ENV += CXX="$(CXX)"
SLEEF_BUILD_ENV += CFLAGS="$(CFLAGS)"
SLEEF_BUILD_ENV += CXXFLAGS="$(CXXFLAGS)"
SLEEF_BUILD_ENV += LDFLAGS="$(LDFLAGS)"
SLEEF_BUILD_ENV += LD_OPTIONS="$(LD_OPTIONS)"
SLEEF_BUILD_ENV += PATH="$(PATH)"
SLEEF_BUILD_ENV += LANG="C"
SLEEF_BUILD_ENV += LC_ALL="C"

configure:
	( cd $(TOPSRCDIR) ; \
	  mkdir -p $(TOPBUILDDIR) ; \
	  if [ ! -f $(TOPBUILDDIR)/.configured ] ; \
	    then echo "Configuring $(SLEEF_TARGET) SLEEF with $(CMAKE_OPTIONS)" ; \
	    cd $(TOPBUILDDIR) ; \
	    /usr/bin/env - $(SLEEF_BUILD_ENV) $(CMAKE) $(CMAKE_OPTIONS) $(TOPSRCDIR) ; \
	    cd $(TOPBUILDDIR) ; \
	    touch $(TOPBUILDDIR)/.configured ; \
	  else \
	    echo "SLEEF has already been configured." ; \
	  fi )

confclean:
	  rm -f $(TOPBUILDDIR)/.configured

build: configure
	( if [ ! -d $(TOPBUIDDIR) ] || [ ! -f $(TOPBUILDDIR)/.configured ] ; \
	    then echo "SLEEF has not been configured" ; \
	  else \
	    cd $(TOPBUILDDIR) ; \
	    $(GMAKE) $(GMAKE_NUMJOBS) ; \
	    touch $(TOPBUILDDIR)/.built ; \
	  fi )

clean:
	( if [ -f $(TOPBUIDLDIR) ] ; \
	    then cd $(TOPBUILDDIR) ; \
	    $(GMAKE) clean ; \
	    rm -f $(TOPBUILDDIR)/.built ; \
	  fi )

clobber:
	  rm -rf $(TOPBUILDDIR)

all: build


